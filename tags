!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARP_CACHE_SZ	include/arp.h	12;"	d
ARP_ETHERNET	include/arp.h	8;"	d
ARP_FREE	include/arp.h	17;"	d
ARP_HRD_ETHER	include/arp.h	35;"	d
ARP_HRD_SZ	include/arp.h	44;"	d
ARP_IP	include/arp.h	9;"	d
ARP_OP_INREPLY	include/arp.h	42;"	d
ARP_OP_INREQUEST	include/arp.h	41;"	d
ARP_OP_REPLY	include/arp.h	38;"	d
ARP_OP_REQUEST	include/arp.h	37;"	d
ARP_OP_RREPLY	include/arp.h	40;"	d
ARP_OP_RREQUEST	include/arp.h	39;"	d
ARP_REQ_RETRY	include/arp.h	21;"	d
ARP_RESOLVED	include/arp.h	19;"	d
ARP_TIMEOUT	include/arp.h	13;"	d
ARP_WAITING	include/arp.h	18;"	d
ARP_WAITTIME	include/arp.h	14;"	d
BRD_HWADDR	arp/arp.c	6;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CC	arp/Makefile	/^CC = gcc$/;"	m
CC	ip/Makefile	/^CC = gcc$/;"	m
CC	lib/Makefile	/^CC = gcc$/;"	m
CC	net/Makefile	/^CC = gcc$/;"	m
CC	test/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -lpthread$/;"	m
CFLAGS	arp/Makefile	/^CFLAGS = -I..\/include$/;"	m
CFLAGS	ip/Makefile	/^CFLAGS = -I..\/include$/;"	m
CFLAGS	lib/Makefile	/^CFLAGS = -I..\/include$/;"	m
CFLAGS	net/Makefile	/^CFLAGS = -I..\/include$/;"	m
CFLAGS	test/Makefile	/^CFLAGS = -I..\/include$/;"	m
CMD_NONUM	test/shell.c	29;"	d	file:
ETH_ALEN	include/ether.h	7;"	d
ETH_HRD_SZ	include/ether.h	6;"	d
ETH_P_ARP	include/ether.h	10;"	d
ETH_P_IP	include/ether.h	9;"	d
ETH_P_RARP	include/ether.h	11;"	d
FAKE_HWADDR	net/net.c	25;"	d	file:
FAKE_IPADDR	net/net.c	24;"	d	file:
FAKE_TAP_ADDR	net/netdev.c	59;"	d	file:
HOST_LITTLE_ENDIAN	include/netif.h	39;"	d
ICMP_HRD_SZ	include/icmp.h	16;"	d
ICMP_T_ECHOREQ	include/icmp.h	19;"	d
ICMP_T_ECHORLY	include/icmp.h	18;"	d
IPFMT	include/ip.h	47;"	d
IP_ALEN	include/ip.h	9;"	d
IP_FRAG_DF	include/ip.h	14;"	d
IP_FRAG_MASK	include/ip.h	17;"	d
IP_FRAG_MF	include/ip.h	15;"	d
IP_FRAG_OFF	include/ip.h	16;"	d
IP_FRAG_RS	include/ip.h	13;"	d
IP_HRD_SZ	include/ip.h	40;"	d
IP_P_EGP	include/ip.h	22;"	d
IP_P_ICMP	include/ip.h	19;"	d
IP_P_IGMP	include/ip.h	20;"	d
IP_P_OSPF	include/ip.h	24;"	d
IP_P_TCP	include/ip.h	21;"	d
IP_P_UDP	include/ip.h	23;"	d
IP_VERSION_4	include/ip.h	11;"	d
LD	arp/Makefile	/^LD = ld$/;"	m
LD	ip/Makefile	/^LD = ld$/;"	m
LD	lib/Makefile	/^LD = ld$/;"	m
LD	net/Makefile	/^LD = ld$/;"	m
LD	test/Makefile	/^LD = ld$/;"	m
LIST_HEAD	include/list.h	49;"	d
MACFMT	include/ether.h	36;"	d
NETDEV_ALEN	include/netif.h	4;"	d
NETDEV_NLEN	include/netif.h	5;"	d
NET_DEBUG_ARP	include/lib.h	55;"	d
NET_DEBUG_DEV	include/lib.h	53;"	d
NET_DEBUG_ICMP	include/lib.h	57;"	d
NET_DEBUG_IP	include/lib.h	56;"	d
NET_DEBUG_L2	include/lib.h	54;"	d
NET_DEBUG_TCP	include/lib.h	59;"	d
NET_DEBUG_UDP	include/lib.h	58;"	d
NET_STACK_OBJS	Makefile	/^NET_STACK_OBJS =	test\/test_obj.o	\\$/;"	m
NULL	include/list.h	5;"	d
OBJS	arp/Makefile	/^OBJS	=	arp.o		\\$/;"	m
OBJS	ip/Makefile	/^OBJS	=	ip.o		\\$/;"	m
OBJS	lib/Makefile	/^OBJS	=	lib.o$/;"	m
OBJS	net/Makefile	/^OBJS	=	net.o		\\$/;"	m
OBJS	test/Makefile	/^OBJS	=	test.o		\\$/;"	m
TUNTAPDEV	net/tap.c	18;"	d	file:
__ARP_H	include/arp.h	2;"	d
__ETHER_H	include/ether.h	2;"	d
__ICMP_H	include/icmp.h	2;"	d
__IP_H	include/ip.h	2;"	d
__LIB_H	include/lib.h	2;"	d
__LIST_H	include/list.h	2;"	d
__NETIF_H	include/netif.h	2;"	d
__ROUTE_H	include/route.h	2;"	d
__arpstate	arp/arp_cache.c	/^static char *__arpstate[] = {$/;"	v	file:
__list_add	include/list.h	/^static inline void __list_add(struct list_head *list,$/;"	f
__list_del	include/list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
_free_pkb	net/pkb.c	/^void _free_pkb(struct pkbuf *pkb)$/;"	f
_net_hwaddr	include/netif.h	/^	unsigned char _net_hwaddr[NETDEV_ALEN];	\/* fake hardware address *\/$/;"	m	struct:netdev
_net_ipaddr	include/netif.h	/^	unsigned int _net_ipaddr;		\/* fake ip address *\/$/;"	m	struct:netdev
_space	lib/lib.c	/^static char *_space = "                                              ";$/;"	v	file:
ae_dev	include/arp.h	/^	struct netdev *ae_dev;			\/* associated net interface *\/$/;"	m	struct:arpentry	typeref:struct:arpentry::netdev
ae_hwaddr	include/arp.h	/^	unsigned char ae_hwaddr[ETH_ALEN];	\/* L2 protocol address(ethernet) *\/$/;"	m	struct:arpentry
ae_ipaddr	include/arp.h	/^	unsigned int ae_ipaddr;			\/* L3 protocol address(ip) *\/$/;"	m	struct:arpentry
ae_list	include/arp.h	/^	struct list_head ae_list;		\/* packet pending for hard address *\/$/;"	m	struct:arpentry	typeref:struct:arpentry::list_head
ae_pro	include/arp.h	/^	unsigned short ae_pro;			\/* L3 protocol supported by arp *\/$/;"	m	struct:arpentry
ae_retry	include/arp.h	/^	int ae_retry;				\/* arp reuqest retrying times *\/$/;"	m	struct:arpentry
ae_state	include/arp.h	/^	unsigned int ae_state;			\/* entry state *\/$/;"	m	struct:arpentry
ae_ttl	include/arp.h	/^	int ae_ttl;				\/* entry timeout *\/$/;"	m	struct:arpentry
alloc_netdev_pkb	net/pkb.c	/^struct pkbuf *alloc_netdev_pkb(struct netdev *nd)$/;"	f
alloc_pkb	net/pkb.c	/^struct pkbuf *alloc_pkb(int size)$/;"	f
alloc_tap	net/tap.c	/^int alloc_tap(char *dev)$/;"	f
arp	include/arp.h	/^struct arp {$/;"	s
arp_alloc	arp/arp_cache.c	/^struct arpentry *arp_alloc(void)$/;"	f
arp_cache	arp/arp_cache.c	/^static struct arpentry arp_cache[ARP_CACHE_SZ];$/;"	v	typeref:struct:arpentry	file:
arp_cache_init	arp/arp_cache.c	/^void arp_cache_init(void)$/;"	f
arp_cache_traverse	arp/arp_cache.c	/^void arp_cache_traverse(void)$/;"	f
arp_data	include/arp.h	/^	unsigned char arp_data[0];		\/* arp data field *\/$/;"	m	struct:arp
arp_hrd	include/arp.h	/^	unsigned short arp_hrd;		\/* hardware address type *\/$/;"	m	struct:arp
arp_hrdlen	include/arp.h	/^	unsigned char arp_hrdlen;	\/* hardware address lenth *\/$/;"	m	struct:arp
arp_hton	include/arp.h	/^static inline void arp_hton(struct arp *ahdr)$/;"	f
arp_in	arp/arp.c	/^void arp_in(struct netdev *nd, struct pkbuf *pkb)$/;"	f
arp_insert	arp/arp_cache.c	/^int arp_insert(struct netdev *nd, unsigned short pro,$/;"	f
arp_lookup	arp/arp_cache.c	/^struct arpentry *arp_lookup(unsigned short pro, unsigned int ipaddr)$/;"	f
arp_ntoh	include/arp.h	69;"	d
arp_op	include/arp.h	/^	unsigned short arp_op;		\/* ARP opcode(command) *\/$/;"	m	struct:arp
arp_pro	include/arp.h	/^	unsigned short arp_pro;		\/* protocol address type *\/$/;"	m	struct:arp
arp_prolen	include/arp.h	/^	unsigned char arp_prolen;	\/* protocol address lenth *\/$/;"	m	struct:arp
arp_queue_send	arp/arp.c	/^void arp_queue_send(struct arpentry *ae)$/;"	f
arp_request	arp/arp.c	/^void arp_request(struct arpentry *ae)$/;"	f
arp_sha	include/arp.h	/^	unsigned char arp_sha[ETH_ALEN];	\/* sender hw addr *\/$/;"	m	struct:arp
arp_sip	include/arp.h	/^	unsigned int arp_sip;			\/* send ip addr *\/$/;"	m	struct:arp
arp_tha	include/arp.h	/^	unsigned char arp_tha[ETH_ALEN];	\/* target hw addr *\/$/;"	m	struct:arp
arp_timer	arp/arp_cache.c	/^void arp_timer(int delta)$/;"	f
arp_tip	include/arp.h	/^	unsigned int arp_tip;			\/* target ip addr *\/$/;"	m	struct:arp
arpcache	test/net_command.c	/^void arpcache(int argc, char **argv)$/;"	f
arpdbg	include/lib.h	23;"	d
arpentry	include/arp.h	/^struct arpentry {$/;"	s
arpstate	arp/arp_cache.c	/^static inline char *arpstate(struct arpentry *ae)$/;"	f	file:
bind_device	arp/arping.c	/^void bind_device(void)$/;"	f
builtin_exit	test/shell.c	/^static void builtin_exit(int argc, char **argv)$/;"	f	file:
builtin_help	test/shell.c	/^void builtin_help(int argc, char **argv)$/;"	f
chksum	lib/chksum.c	/^unsigned short chksum(unsigned short *data, int size)$/;"	f
cmd_func	test/shell.c	/^	void (*cmd_func)(int, char **);$/;"	m	struct:command	file:
cmd_help	test/shell.c	/^	char *cmd_help;$/;"	m	struct:command	file:
cmd_num	test/shell.c	/^	int cmd_num;$/;"	m	struct:command	file:
cmd_str	test/shell.c	/^	char *cmd_str;$/;"	m	struct:command	file:
cmds	test/shell.c	/^static struct command cmds[] = {$/;"	v	typeref:struct:command	file:
command	test/shell.c	/^struct command {$/;"	s	file:
dbg	include/lib.h	9;"	d
delete_frag	ip/ip_frag.c	/^void delete_frag(struct fragment *frag)$/;"	f
delete_tap	net/tap.c	/^void delete_tap(int tapfd)$/;"	f
dest	arp/arping.c	/^struct sockaddr_ll src, dest;$/;"	v	typeref:struct:
devdbg	include/lib.h	11;"	d
device	arp/arping.c	/^char *target, *device = "eth0";	\/* default network interface *\/$/;"	v
echo	include/icmp.h	/^		} echo;$/;"	m	union:icmp::__anon1	typeref:struct:icmp::__anon1::__anon2
eth_data	include/ether.h	/^	unsigned char eth_data[0];		\/* data field *\/$/;"	m	struct:ether
eth_dst	include/ether.h	/^	unsigned char eth_dst[ETH_ALEN];	\/* destination ether addr *\/$/;"	m	struct:ether
eth_pro	include/ether.h	/^	unsigned short eth_pro;			\/* packet type ID *\/$/;"	m	struct:ether
eth_src	include/ether.h	/^	unsigned char eth_src[ETH_ALEN];	\/* source ether addr *\/$/;"	m	struct:ether
ether	include/ether.h	/^struct ether {$/;"	s
ethpro	include/ether.h	/^static inline char *ethpro(unsigned short proto)$/;"	f
ferr	include/lib.h	8;"	d
frag_dst	include/ip.h	/^	unsigned int frag_dst;$/;"	m	struct:fragment
frag_id	include/ip.h	/^	unsigned short frag_id;$/;"	m	struct:fragment
frag_list	include/ip.h	/^	struct list_head frag_list;$/;"	m	struct:fragment	typeref:struct:fragment::list_head
frag_pkb	include/ip.h	/^	struct list_head frag_pkb;$/;"	m	struct:fragment	typeref:struct:fragment::list_head
frag_rsize	include/ip.h	/^	unsigned int frag_rsize;\/* size of received fragments *\/$/;"	m	struct:fragment
frag_size	include/ip.h	/^	unsigned int frag_size;	\/* total fragments size(original packet) *\/$/;"	m	struct:fragment
frag_src	include/ip.h	/^	unsigned int frag_src;$/;"	m	struct:fragment
frag_ttl	include/ip.h	/^	int frag_ttl;		\/* reassembly timer *\/$/;"	m	struct:fragment
fragment	include/ip.h	/^struct fragment {$/;"	s
free_pkb	include/netif.h	79;"	d
full_frag	ip/ip_frag.c	/^static inline int full_frag(struct fragment *frag)$/;"	f	file:
get_arg	test/shell.c	/^static char *get_arg(char **pp)$/;"	f	file:
get_line	test/shell.c	/^static int get_line(char *buf, int bufsz)$/;"	f	file:
gethostip	arp/arping.c	/^void gethostip(char *device, struct in_addr *addr)$/;"	f
gethwaddr_tap	net/tap.c	/^void gethwaddr_tap(int tapfd, unsigned char *ha)$/;"	f
getipaddr_tap	net/tap.c	/^void getipaddr_tap(char *name, unsigned int *ipaddr)$/;"	f
getmtu_tap	net/tap.c	/^void getmtu_tap(char *name, int *mtu)$/;"	f
getname_tap	net/tap.c	/^void getname_tap(int tapfd, char *name)$/;"	f
hostaddr	arp/arping.c	/^struct sockaddr_ll *hostaddr = &src, *targetaddr = &dest;$/;"	v	typeref:struct:sockaddr_ll
hostip	arp/arping.c	/^struct in_addr hostip, targetip;$/;"	v	typeref:struct:in_addr
htonl	include/netif.h	/^static inline unsigned int htonl(unsigned int host)$/;"	f
htons	include/netif.h	/^static inline unsigned short htons(unsigned short host)$/;"	f
hwacmp	include/ether.h	/^static inline int hwacmp(unsigned char *hwa1, unsigned char *hwa2)$/;"	f
hwacpy	include/ether.h	/^static inline void hwacpy(unsigned char *dst, unsigned char *src)$/;"	f
hwaset	include/ether.h	/^static inline void hwaset(unsigned char *dst, int val)$/;"	f
icmp	include/icmp.h	/^struct icmp {$/;"	s
icmp_chksum	ip/icmp.c	/^unsigned short icmp_chksum(unsigned short *data, int size)$/;"	f
icmp_cksum	include/icmp.h	/^	unsigned short icmp_cksum;$/;"	m	struct:icmp
icmp_code	include/icmp.h	/^	unsigned char icmp_code;$/;"	m	struct:icmp
icmp_data	include/icmp.h	/^	} icmp_data;$/;"	m	struct:icmp	typeref:union:icmp::__anon1
icmp_in	ip/icmp.c	/^void icmp_in(struct pkbuf *pkb)$/;"	f
icmp_type	include/icmp.h	/^	unsigned char icmp_type;$/;"	m	struct:icmp
icmpdbg	include/lib.h	47;"	d
id	include/icmp.h	/^			unsigned short id;	\/* identifier *\/$/;"	m	struct:icmp::__anon1::__anon2
ifconfig	test/net_command.c	/^void ifconfig(int argc, char **argv)$/;"	f
ifindex	arp/arping.c	/^int ifindex;$/;"	v
insert_frag	ip/ip_frag.c	/^int insert_frag(struct pkbuf *pkb, struct fragment *frag)$/;"	f
ip	include/ip.h	/^struct ip {$/;"	s
ip_chksum	ip/ip.c	/^unsigned short ip_chksum(unsigned short *data, int size)$/;"	f
ip_cksum	include/ip.h	/^	unsigned short ip_cksum;	\/* header checksum *\/$/;"	m	struct:ip
ip_data	include/ip.h	/^	unsigned char ip_data[0];	\/* data field *\/$/;"	m	struct:ip
ip_dst	include/ip.h	/^	unsigned int ip_dst;		\/* dest address *\/$/;"	m	struct:ip
ip_forward	ip/ip.c	/^void ip_forward(struct netdev *nd, struct pkbuf *pkb)$/;"	f
ip_frag	ip/ip_frag.c	/^struct pkbuf *ip_frag(struct ip *orig, int hlen, int dlen, int off, unsigned short mf_bit)$/;"	f
ip_fragoff	include/ip.h	/^	unsigned short ip_fragoff;	\/* fragment offset(in 8-octet's) *\/$/;"	m	struct:ip
ip_hton	include/ip.h	57;"	d
ip_id	include/ip.h	/^	unsigned short ip_id;		\/* datagram id *\/$/;"	m	struct:ip
ip_in	ip/ip.c	/^void ip_in(struct netdev *nd, struct pkbuf *pkb)$/;"	f
ip_len	include/ip.h	/^	unsigned short ip_len;		\/* total ip packet data lenth *\/$/;"	m	struct:ip
ip_ntoh	include/ip.h	/^static inline void ip_ntoh(struct ip *iphdr)$/;"	f
ip_pro	include/ip.h	/^	unsigned char ip_pro;		\/* IP protocol *\/$/;"	m	struct:ip
ip_reass	ip/ip_frag.c	/^struct pkbuf *ip_reass(struct pkbuf *pkb)$/;"	f
ip_recv	ip/ip.c	/^void ip_recv(struct pkbuf *pkb)$/;"	f
ip_send	ip/ip.c	/^void ip_send(struct pkbuf *pkb, int fwd)$/;"	f
ip_send_dev	ip/ip.c	/^void ip_send_dev(struct netdev *dev, struct pkbuf *pkb, unsigned int dst)$/;"	f
ip_send_frag	ip/ip_frag.c	/^void ip_send_frag(struct netdev *dev, struct pkbuf *pkb, unsigned int dst)$/;"	f
ip_send_info	ip/ip.c	/^void ip_send_info(struct pkbuf *pkb, unsigned char tos, unsigned short len,$/;"	f
ip_setchksum	ip/ip.c	/^void ip_setchksum(struct ip *iphdr)$/;"	f
ip_src	include/ip.h	/^	unsigned int ip_src;		\/* source address *\/$/;"	m	struct:ip
ip_timer	ip/ip_frag.c	/^void ip_timer(int delta)$/;"	f
ip_tos	include/ip.h	/^	unsigned char ip_tos;		\/* type of service *\/$/;"	m	struct:ip
ip_ttl	include/ip.h	/^	unsigned char ip_ttl;		\/* time to live, in gateway hops *\/$/;"	m	struct:ip
ip_verlen	include/ip.h	/^	unsigned char ip_verlen;	\/* vertion(4bit), iphdr length(4bit) *\/$/;"	m	struct:ip
ipdbg	include/lib.h	41;"	d
ipfmt	include/ip.h	48;"	d
iphlen	include/ip.h	43;"	d
ipid	ip/ip.c	/^static unsigned short ipid = 0;$/;"	v	file:
ipnfmt	arp/arp_cache.c	/^char *ipnfmt(unsigned int ipaddr)$/;"	f
ipoff	include/ip.h	44;"	d
ipver	include/ip.h	42;"	d
l2dbg	include/lib.h	17;"	d
list_add	include/list.h	/^static inline void list_add(struct list_head *list, struct list_head *head)$/;"	f
list_add_tail	include/list.h	/^static inline void list_add_tail(struct list_head *list, struct list_head *head)$/;"	f
list_del	include/list.h	/^static inline void list_del(struct list_head *list)$/;"	f
list_empty	include/list.h	52;"	d
list_entry	include/list.h	54;"	d
list_first_entry	include/list.h	56;"	d
list_for_each_entry	include/list.h	59;"	d
list_head	include/list.h	/^struct list_head {$/;"	s
list_init	include/list.h	/^static inline void list_init(struct list_head *head)$/;"	f
lookup_frag	ip/ip_frag.c	/^struct fragment *lookup_frag(struct ip *iphdr)$/;"	f
macfmt	include/ether.h	35;"	d
main	arp/arping.c	/^int main(int argc, char **argv)$/;"	f
main	test/shell.c	/^int main(int argc, char **argv)$/;"	f
main	test/test.c	/^int main(int argc, char **argv)$/;"	f
net_debug	test/net_command.c	/^unsigned int net_debug = 0;$/;"	v
net_fd	include/netif.h	/^	int net_fd;				\/* virtual netif file descriptor *\/$/;"	m	struct:netdev
net_hwaddr	include/netif.h	/^	unsigned char net_hwaddr[NETDEV_ALEN];	\/* hardware address *\/$/;"	m	struct:netdev
net_in	net/net.c	/^void net_in(struct netdev *nd, struct pkbuf *pkb)$/;"	f
net_ipaddr	include/netif.h	/^	unsigned int  net_ipaddr;		\/* dev binding ip address *\/$/;"	m	struct:netdev
net_mtu	include/netif.h	/^	int net_mtu;$/;"	m	struct:netdev
net_name	include/netif.h	/^	unsigned char net_name[NETDEV_NLEN];	\/* device name *\/$/;"	m	struct:netdev
net_stack_exit	test/test.c	/^void net_stack_exit(void)$/;"	f
net_stack_init	test/test.c	/^void net_stack_init(void)$/;"	f
net_stack_run	test/test.c	/^void net_stack_run(void)$/;"	f
net_stats	include/netif.h	/^	struct netstats net_stats;		\/* protocol independent statistic *\/$/;"	m	struct:netdev	typeref:struct:netdev::netstats
net_timer	net/net.c	/^void net_timer(void)$/;"	f
netdebug	test/net_command.c	/^void netdebug(int argc, char **argv)$/;"	f
netdev	include/netif.h	/^struct netdev {$/;"	s
netdev_alloc	net/netdev.c	/^struct netdev *netdev_alloc(char *dev)$/;"	f
netdev_exit	net/net.c	/^void netdev_exit(void)$/;"	f
netdev_fillinfo	net/netdev.c	/^void netdev_fillinfo(struct netdev *nd)$/;"	f
netdev_free	net/netdev.c	/^void netdev_free(struct netdev *nd)$/;"	f
netdev_init	net/net.c	/^void netdev_init(void)$/;"	f
netdev_interrupt	net/net.c	/^void netdev_interrupt(void)$/;"	f
netdev_poll	net/netdev.c	/^void netdev_poll(struct netdev *nd)$/;"	f
netdev_recv	net/netdev.c	/^int netdev_recv(struct netdev *nd, struct pkbuf *pkb)$/;"	f
netdev_rx	net/net.c	/^void netdev_rx(struct netdev *nd)$/;"	f
netdev_send	net/netdev.c	/^void netdev_send(struct netdev *nd, struct pkbuf *pkb, int len)$/;"	f
netdev_tx	net/net.c	/^void netdev_tx(struct netdev *nd, struct pkbuf *pkb, int len,$/;"	f
netstats	include/netif.h	/^struct netstats {$/;"	s
new_frag	ip/ip_frag.c	/^struct fragment *new_frag(struct ip *iphdr)$/;"	f
newproc	test/test.c	/^int newproc(void *(*proc)(void), int notty)$/;"	f
newthread	test/test.c	/^int newthread(pfunc_t thread_func)$/;"	f
next	include/list.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::
ntohl	include/netif.h	55;"	d
ntohs	include/netif.h	46;"	d
parse_arg	arp/arping.c	/^void parse_arg(int argc, char **argv)$/;"	f
parse_args	test/shell.c	/^static void parse_args(int argc, char **argv)$/;"	f	file:
parse_line	test/shell.c	/^static int parse_line(char *line, int len, char **argv)$/;"	f	file:
perrx	arp/arping.c	/^void perrx(char *str)$/;"	f
perrx	lib/lib.c	/^void perrx(char *str)$/;"	f
pfunc_t	test/test.c	/^typedef void *(*pfunc_t)(void *);$/;"	t	file:
pk_data	include/netif.h	/^	unsigned char pk_data[0];$/;"	m	struct:pkbuf
pk_len	include/netif.h	/^	int pk_len;$/;"	m	struct:pkbuf
pk_list	include/netif.h	/^	struct list_head pk_list;	\/* for ip fragment or arp waiting list *\/$/;"	m	struct:pkbuf	typeref:struct:pkbuf::list_head
pk_pro	include/netif.h	/^	unsigned short pk_pro;		\/* ethernet packet type ID *\/$/;"	m	struct:pkbuf
pkb2ip	include/ip.h	45;"	d
pkbdbg	net/pkb.c	/^void pkbdbg(struct pkbuf *pkb)$/;"	f
pkbuf	include/netif.h	/^struct pkbuf {$/;"	s
prev	include/list.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
print_prompt	test/shell.c	/^static void print_prompt(void)$/;"	f	file:
printfs	lib/lib.c	/^void printfs(int mlen, const char *fmt, ...)$/;"	f
prompt	test/shell.c	/^static char *prompt = "[net shell]";$/;"	v	file:
quit	test/shell.c	/^static int quit;$/;"	v	file:
reass_frag	ip/ip_frag.c	/^struct pkbuf *reass_frag(struct fragment *frag)$/;"	f
route	test/net_command.c	/^void route(int argc, char **argv)$/;"	f
rt_add	ip/route.c	/^void rt_add(unsigned int ipaddr, unsigned int netmask, struct netdev *dev)$/;"	f
rt_alloc	ip/route.c	/^struct rtentry *rt_alloc(unsigned int ipaddr,$/;"	f
rt_dev	include/route.h	/^	struct netdev *rt_dev;$/;"	m	struct:rtentry	typeref:struct:rtentry::netdev
rt_init	ip/route.c	/^void rt_init(void)$/;"	f
rt_ipaddr	include/route.h	/^	unsigned int rt_ipaddr;		\/* next-hop address *\/$/;"	m	struct:rtentry
rt_list	include/route.h	/^	struct list_head rt_list;$/;"	m	struct:rtentry	typeref:struct:rtentry::list_head
rt_lookup	ip/route.c	/^struct rtentry *rt_lookup(unsigned int ipaddr)$/;"	f
rt_netmask	include/route.h	/^	unsigned int rt_netmask;$/;"	m	struct:rtentry
rt_traverse	ip/route.c	/^void rt_traverse(void)$/;"	f
rtentry	include/route.h	/^struct rtentry {$/;"	s
rx_bytes	include/netif.h	/^	unsigned int rx_bytes;$/;"	m	struct:netstats
rx_errors	include/netif.h	/^	unsigned int rx_errors;$/;"	m	struct:netstats
rx_packets	include/netif.h	/^	unsigned int rx_packets;$/;"	m	struct:netstats
send_pack	arp/arping.c	/^void send_pack(void)$/;"	f
seq	include/icmp.h	/^			unsigned short seq;	\/* sequence number *\/$/;"	m	struct:icmp::__anon1::__anon2
set_addr	arp/arping.c	/^void set_addr(void)$/;"	f
set_device	arp/arping.c	/^int set_device(void)$/;"	f
setdown_tap	net/tap.c	/^void setdown_tap(char *name)$/;"	f
setflags_tap	net/tap.c	/^void setflags_tap(char *name, unsigned short flags, int set)$/;"	f
setipaddr_tap	net/tap.c	/^void setipaddr_tap(char *name, unsigned int ipaddr)$/;"	f
setup_tap	net/tap.c	/^void setup_tap(char *name)$/;"	f
signal_init	test/shell.c	/^static void signal_init(void)$/;"	f	file:
signal_int	test/shell.c	/^static void signal_int(int nr, siginfo_t *si, void *p)$/;"	f	file:
signal_wait	test/net_command.c	/^void signal_wait(int signum)$/;"	f
sockfd	arp/arping.c	/^int sockfd;$/;"	v
src	arp/arping.c	/^struct sockaddr_ll src, dest;$/;"	v	typeref:struct:sockaddr_ll
target	arp/arping.c	/^char *target, *device = "eth0";	\/* default network interface *\/$/;"	v
targetaddr	arp/arping.c	/^struct sockaddr_ll *hostaddr = &src, *targetaddr = &dest;$/;"	v	typeref:struct:
targetip	arp/arping.c	/^struct in_addr hostip, targetip;$/;"	v	typeref:struct:
tcpdbg	include/lib.h	35;"	d
test_shell	test/shell.c	/^void test_shell(char *prompt_str)$/;"	f
threads	test/test.c	/^static pthread_t threads[2];$/;"	v	file:
tx_bytes	include/netif.h	/^	unsigned int tx_bytes;$/;"	m	struct:netstats
tx_errors	include/netif.h	/^	unsigned int tx_errors;$/;"	m	struct:netstats
tx_packets	include/netif.h	/^	unsigned int tx_packets;$/;"	m	struct:netstats
udpdbg	include/lib.h	29;"	d
usage	arp/arping.c	/^void usage(void)$/;"	f
veth	net/net.c	/^struct netdev *veth;	\/* virtual ethernet card device *\/$/;"	v	typeref:struct:netdev
