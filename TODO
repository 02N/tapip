1.
 TCP protocol implementation
---
 implement tcp three-way handshake connection
2.
 network debug tools:
  traceroute, arping, ss, route, arp, ip [...]
3.
 In TOP1, l2 cannot receive its reply packet sometimes!
 Should we using a single thread to receive packet and
 another thread to parse it?
4.
 Ping cause segment fault sometimes!
---
 This bug is caused by condition race of freed socket structure.
 When I enter Ctrl + C, an interrupt signal is sent to shell thread, not to
 ping thread, then _close()->free_socket() will free socket structure,
 at the same time ping thread will return from _recv(), which is waken up
 by _close()->wait_exit().
 ping thread also call _close() to socket structure, which cause double free to socket!

 I set sock to NULL before free it, so ping thread will not free it again!
 Another method is set a mutex to sock.

 But the final method is to make tty signal be sent to ping thread, which is
 left to do sometime.
5.
 Add bridge programming, then we should not use brctl
 and can delete doc/brctl.sh
6.
 test udp get port alogrithm
7.
 multicast/broadcast address handle
8.
 ip option handle

